export default function getActionFromState(state, options) {
  // Create a normalized configs object which will be easier to use
  const normalizedConfig = options ? createNormalizedConfigItem(options) : {};
  let payload;
  let current = state;
  let config = normalizedConfig;
  let params = {};

  while (current) {
    var _config, _config2, _config2$screens;

    if (current.routes.length === 0) {
      return undefined;
    }

    const route = current.routes[current.routes.length - 1];

    if (current.routes.length === 1) {
      params.initial = true;
      params.screen = route.name;
      params.state = undefined; // Explicitly set to override existing value when merging params
    } else if (current.routes.length === 2 && current.routes[0].key === undefined && current.routes[0].name === ((_config = config) === null || _config === void 0 ? void 0 : _config.initialRouteName)) {
      params.initial = false;
      params.screen = route.name;
      params.state = undefined;
    } else {
      params.initial = undefined;
      params.screen = undefined;
      params.params = undefined;
      params.state = current;
      break;
    }

    if (route.state) {
      params.params = { ...route.params
      };
      params = params.params;
    } else {
      params.params = route.params;
    }

    current = route.state;
    config = (_config2 = config) === null || _config2 === void 0 ? void 0 : (_config2$screens = _config2.screens) === null || _config2$screens === void 0 ? void 0 : _config2$screens[route.name];

    if (!payload) {
      payload = {
        name: route.name,
        params
      };
    }
  }

  if (!payload) {
    return;
  } // Try to construct payload for a `NAVIGATE` action from the state
  // This lets us preserve the navigation state and not lose it


  return {
    type: 'NAVIGATE',
    payload
  };
}

const createNormalizedConfigItem = config => typeof config === 'object' && config != null ? {
  initialRouteName: config.initialRouteName,
  screens: config.screens != null ? createNormalizedConfigs(config.screens) : undefined
} : {};

const createNormalizedConfigs = options => Object.entries(options).reduce((acc, [k, v]) => {
  acc[k] = createNormalizedConfigItem(v);
  return acc;
}, {});
//# sourceMappingURL=getActionFromState.js.map
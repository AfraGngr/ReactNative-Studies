{"version":3,"sources":["createNativeStackNavigator.js"],"names":["renderComponentOrThunk","componentOrThunk","props","REMOVE_ACTION","StackView","React","Component","route","navigation","dispatch","type","immediate","key","descriptor","options","onAppear","StackActions","completeTransition","toChildKey","state","routes","lastRoute","length","index","navigationConfig","headerMode","title","headerStyle","headerTitleStyle","headerBackTitleStyle","headerBackTitle","headerBackTitleVisible","headerTintColor","largeTitle","headerLargeTitleStyle","translucent","hideShadow","headerTopInsetEnabled","direction","scene","headerOptions","undefined","titleFontFamily","fontFamily","titleColor","color","titleFontSize","fontSize","backTitle","backTitleFontFamily","backTitleFontSize","largeTitleFontFamily","largeTitleFontSize","largeTitleColor","hasHeader","header","backgroundColor","blurEffect","children","backButtonImage","push","headerLeft","headerBackImage","goBack","requestAnimationFrame","headerPressColorAndroid","backButtonTitle","truncatedBackButtonTitle","backTitleVisible","layoutPreset","headerTitle","headerRight","getComponent","mode","transparentCard","SceneComponent","stackPresentation","cardTransparent","stackAnimation","animationEnabled","screenProps","StyleSheet","absoluteFill","cardStyle","replaceAnimation","Platform","OS","gestureEnabled","_onAppear","_removeScene","_renderHeaderConfig","render","descriptors","styles","scenes","_onFinishTransitioning","map","i","_renderScene","create","flex","createStackNavigator","routeConfigMap","stackConfig","router","superGetStateForAction","getStateForAction","action","backRouteIndex","backRoute","find","indexOf","newRoutes","splice","isTransitioning"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Platform, StyleSheet } from 'react-native';\nimport {\n  Screen,\n  ScreenStack,\n  ScreenStackHeaderBackButtonImage,\n  ScreenStackHeaderCenterView,\n  ScreenStackHeaderConfig,\n  ScreenStackHeaderLeftView,\n  ScreenStackHeaderRightView,\n} from 'react-native-screens';\nimport {\n  createNavigator,\n  SceneView,\n  StackActions,\n  StackRouter,\n} from 'react-navigation';\nimport { HeaderBackButton } from 'react-navigation-stack';\n\nfunction renderComponentOrThunk(componentOrThunk, props) {\n  if (typeof componentOrThunk === 'function') {\n    return componentOrThunk(props);\n  }\n  return componentOrThunk;\n}\n\nconst REMOVE_ACTION = 'NativeStackNavigator/REMOVE';\n\nclass StackView extends React.Component {\n  _removeScene = (route) => {\n    this.props.navigation.dispatch({\n      type: REMOVE_ACTION,\n      immediate: true,\n      key: route.key,\n    });\n  };\n\n  _onAppear = (route, descriptor) => {\n    descriptor.options &&\n      descriptor.options.onAppear &&\n      descriptor.options.onAppear();\n    this.props.navigation.dispatch(\n      StackActions.completeTransition({\n        toChildKey: route.key,\n        key: this.props.navigation.state.key,\n      })\n    );\n  };\n\n  _onFinishTransitioning = () => {\n    const { routes } = this.props.navigation.state;\n    const lastRoute = routes?.length && routes[routes.length - 1];\n\n    if (lastRoute) {\n      this.props.navigation.dispatch(\n        StackActions.completeTransition({\n          toChildKey: lastRoute.key,\n          key: this.props.navigation.state.key,\n        })\n      );\n    }\n  };\n\n  _renderHeaderConfig = (index, route, descriptor) => {\n    const { navigationConfig } = this.props;\n    const { options } = descriptor;\n    const { headerMode } = navigationConfig;\n\n    const {\n      title,\n      headerStyle,\n      headerTitleStyle,\n      headerBackTitleStyle,\n      headerBackTitle,\n      headerBackTitleVisible,\n      headerTintColor,\n      largeTitle,\n      headerLargeTitleStyle,\n      translucent,\n      hideShadow,\n      headerTopInsetEnabled = true,\n      direction,\n    } = options;\n\n    const scene = {\n      index,\n      key: route.key,\n      route,\n      descriptor,\n    };\n\n    const headerOptions = {\n      translucent: translucent === undefined ? false : translucent,\n      title,\n      titleFontFamily: headerTitleStyle && headerTitleStyle.fontFamily,\n      titleColor:\n        (headerTitleStyle && headerTitleStyle.color) || headerTintColor,\n      titleFontSize: headerTitleStyle && headerTitleStyle.fontSize,\n      backTitle: headerBackTitleVisible === false ? '' : headerBackTitle,\n      backTitleFontFamily:\n        headerBackTitleStyle && headerBackTitleStyle.fontFamily,\n      backTitleFontSize: headerBackTitleStyle && headerBackTitleStyle.fontSize,\n      color: headerTintColor,\n      largeTitle,\n      largeTitleFontFamily:\n        headerLargeTitleStyle && headerLargeTitleStyle.fontFamily,\n      largeTitleFontSize:\n        headerLargeTitleStyle && headerLargeTitleStyle.fontSize,\n      largeTitleColor: headerLargeTitleStyle && headerLargeTitleStyle.color,\n      hideShadow,\n      headerTopInsetEnabled,\n      direction,\n    };\n\n    const hasHeader = headerMode !== 'none' && options.header !== null;\n    if (!hasHeader) {\n      return <ScreenStackHeaderConfig {...headerOptions} hidden />;\n    }\n\n    if (headerStyle !== undefined) {\n      headerOptions.backgroundColor = headerStyle.backgroundColor;\n      headerOptions.blurEffect = headerStyle.blurEffect;\n    }\n\n    const children = [];\n\n    if (options.backButtonImage) {\n      children.push(\n        <ScreenStackHeaderBackButtonImage\n          key=\"backImage\"\n          source={options.backButtonImage}\n        />\n      );\n    }\n\n    if (options.headerLeft !== undefined) {\n      children.push(\n        <ScreenStackHeaderLeftView key=\"left\">\n          {renderComponentOrThunk(options.headerLeft, { scene })}\n        </ScreenStackHeaderLeftView>\n      );\n    } else if (options.headerBackImage !== undefined) {\n      const goBack = () => {\n        // Go back on next tick because button ripple effect needs to happen on Android\n        requestAnimationFrame(() => {\n          descriptor.navigation.goBack(descriptor.key);\n        });\n      };\n\n      children.push(\n        <ScreenStackHeaderLeftView key=\"left\">\n          <HeaderBackButton\n            onPress={goBack}\n            pressColorAndroid={options.headerPressColorAndroid}\n            tintColor={options.headerTintColor}\n            backImage={options.headerBackImage}\n            title={options.backButtonTitle}\n            truncatedTitle={options.truncatedBackButtonTitle}\n            backTitleVisible={this.props.backTitleVisible}\n            titleStyle={options.headerBackTitleStyle}\n            layoutPreset={this.props.layoutPreset}\n            scene={scene}\n          />\n        </ScreenStackHeaderLeftView>\n      );\n    }\n\n    if (options.headerTitle) {\n      if (title === undefined && typeof options.headerTitle === 'string') {\n        headerOptions.title = options.headerTitle;\n      } else {\n        children.push(\n          <ScreenStackHeaderCenterView key=\"center\">\n            {renderComponentOrThunk(options.headerTitle, { scene })}\n          </ScreenStackHeaderCenterView>\n        );\n      }\n    }\n\n    if (options.headerRight) {\n      children.push(\n        <ScreenStackHeaderRightView key=\"right\">\n          {renderComponentOrThunk(options.headerRight, { scene })}\n        </ScreenStackHeaderRightView>\n      );\n    }\n\n    if (children.length > 0) {\n      headerOptions.children = children;\n    }\n\n    return <ScreenStackHeaderConfig {...headerOptions} />;\n  };\n\n  _renderScene = (index, route, descriptor) => {\n    const { navigation, getComponent, options } = descriptor;\n    const { mode, transparentCard } = this.props.navigationConfig;\n    const SceneComponent = getComponent();\n\n    let stackPresentation = 'push';\n    if (mode === 'modal' || mode === 'containedModal') {\n      stackPresentation = mode;\n      if (transparentCard || options.cardTransparent) {\n        stackPresentation =\n          mode === 'containedModal'\n            ? 'containedTransparentModal'\n            : 'transparentModal';\n      }\n    }\n\n    let stackAnimation = options.stackAnimation;\n    if (options.animationEnabled === false) {\n      stackAnimation = 'none';\n    }\n\n    const { screenProps } = this.props;\n    return (\n      <Screen\n        key={`screen_${route.key}`}\n        style={[StyleSheet.absoluteFill, options.cardStyle]}\n        stackAnimation={stackAnimation}\n        stackPresentation={stackPresentation}\n        replaceAnimation={\n          options.replaceAnimation === undefined\n            ? 'pop'\n            : options.replaceAnimation\n        }\n        pointerEvents={\n          index === this.props.navigation.state.routes.length - 1\n            ? 'auto'\n            : 'none'\n        }\n        gestureEnabled={\n          Platform.OS === 'android'\n            ? false\n            : options.gestureEnabled === undefined\n            ? true\n            : options.gestureEnabled\n        }\n        onAppear={() => this._onAppear(route, descriptor)}\n        onDismissed={() => this._removeScene(route)}>\n        {this._renderHeaderConfig(index, route, descriptor)}\n        <SceneView\n          screenProps={screenProps}\n          navigation={navigation}\n          component={SceneComponent}\n        />\n      </Screen>\n    );\n  };\n\n  render() {\n    const { navigation, descriptors } = this.props;\n\n    return (\n      <ScreenStack\n        style={styles.scenes}\n        onFinishTransitioning={this._onFinishTransitioning}>\n        {navigation.state.routes.map((route, i) =>\n          this._renderScene(i, route, descriptors[route.key])\n        )}\n      </ScreenStack>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  scenes: { flex: 1 },\n});\n\nfunction createStackNavigator(routeConfigMap, stackConfig = {}) {\n  const router = StackRouter(routeConfigMap, stackConfig);\n\n  // belowe we override getStateForAction method in order to add handling for\n  // a custom native stack navigation action. The action REMOVE that we want to\n  // add works in a similar way to POP, but it does not remove all the routes\n  // that sit on top of the removed route. For example if we have three routes\n  // [a,b,c] and call POP on b, then both b and c will go away. In case we\n  // call REMOVE on b, only b will be removed from the stack and the resulting\n  // state will be [a, c]\n  const superGetStateForAction = router.getStateForAction;\n  router.getStateForAction = (action, state) => {\n    if (action.type === REMOVE_ACTION) {\n      const { key, immediate } = action;\n      let backRouteIndex = state.index;\n      if (key) {\n        const backRoute = state.routes.find((route) => route.key === key);\n        backRouteIndex = state.routes.indexOf(backRoute);\n      }\n\n      if (backRouteIndex > 0) {\n        const newRoutes = [...state.routes];\n        newRoutes.splice(backRouteIndex, 1);\n        return {\n          ...state,\n          routes: newRoutes,\n          index: newRoutes.length - 1,\n          isTransitioning: immediate !== true,\n        };\n      }\n    }\n    return superGetStateForAction(action, state);\n  };\n  // Create a navigator with StackView as the view\n  return createNavigator(StackView, router, stackConfig);\n}\n\nexport default createStackNavigator;\n"]}